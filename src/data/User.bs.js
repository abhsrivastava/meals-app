// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";

function getKeyValue(json, key) {
  var obj = Js_json.classify(json);
  if (typeof obj === "number") {
    return Pervasives.failwith("could not parse Json");
  }
  if (obj.TAG !== /* JSONObject */2) {
    return Pervasives.failwith("could not parse Json");
  }
  var value = Js_dict.get(obj._0, key);
  if (value === undefined) {
    return Pervasives.failwith("" + key + " not found");
  }
  var value$1 = Js_json.classify(Caml_option.valFromOption(value));
  if (typeof value$1 === "number") {
    return Pervasives.failwith("" + key + " is not a string");
  } else if (value$1.TAG === /* JSONString */0) {
    return value$1._0;
  } else {
    return Pervasives.failwith("" + key + " is not a string");
  }
}

function getKeyObject(json, key) {
  var obj = Js_json.classify(json);
  if (typeof obj === "number") {
    return Pervasives.failwith("could not parse Json");
  }
  if (obj.TAG !== /* JSONObject */2) {
    return Pervasives.failwith("could not parse Json");
  }
  var value = Js_dict.get(obj._0, key);
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  } else {
    return Pervasives.failwith("" + key + " not found");
  }
}

function getKeyArray(json, key) {
  var obj = Js_json.classify(json);
  if (typeof obj === "number") {
    return Pervasives.failwith("could not parse json");
  }
  if (obj.TAG !== /* JSONObject */2) {
    return Pervasives.failwith("could not parse json");
  }
  var value = Js_dict.get(obj._0, key);
  if (value === undefined) {
    return Pervasives.failwith("" + key + " not found");
  }
  var array = Js_json.classify(Caml_option.valFromOption(value));
  if (typeof array === "number") {
    return Pervasives.failwith("" + key + " is not an array");
  } else if (array.TAG === /* JSONArray */3) {
    return array._0;
  } else {
    return Pervasives.failwith("" + key + " is not an array");
  }
}

function getUser(param) {
  var response = fetch("https://randomuser.me/api/");
  return Js_promise2.then(Js_promise2.then(response, (function (prim) {
                    return prim.json();
                  })), (function (json) {
                console.log(json);
                return Promise.resolve(getKeyArray(json, "results").map(function (json) {
                                  return [
                                          getKeyObject(json, "name"),
                                          getKeyObject(json, "picture")
                                        ];
                                }).map(function (param) {
                                var name = param[0];
                                var first = getKeyValue(name, "first");
                                var last = getKeyValue(name, "last");
                                var fullName = "" + first + " " + last + "";
                                var thumbnail = getKeyValue(param[1], "thumbnail");
                                return {
                                        fullName: fullName,
                                        thumbnail: thumbnail
                                      };
                              }));
              }));
}

export {
  getKeyValue ,
  getKeyObject ,
  getKeyArray ,
  getUser ,
}
/* No side effect */
