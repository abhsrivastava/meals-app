// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_promise2 from "rescript/lib/es6/js_promise2.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var PARSE_FAILED = /* @__PURE__ */Caml_exceptions.create("Meal.PARSE_FAILED");

function getValue(obj, key) {
  var valueObj = Js_dict.get(obj, key);
  if (valueObj !== undefined) {
    var value = Js_json.classify(Caml_option.valFromOption(valueObj));
    if (typeof value !== "number" && value.TAG === /* JSONString */0) {
      return value._0;
    }
    throw {
          RE_EXN_ID: PARSE_FAILED,
          _1: "value of " + key + " is not a string",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: PARSE_FAILED,
        _1: "" + key + " not found in meal json",
        Error: new Error()
      };
}

function parseMeal(json) {
  var obj = Js_json.classify(json);
  if (typeof obj === "number") {
    throw {
          RE_EXN_ID: PARSE_FAILED,
          _1: "Meal is not an object",
          Error: new Error()
        };
  }
  if (obj.TAG === /* JSONObject */2) {
    var obj$1 = obj._0;
    var id = Belt_Option.getExn(Belt_Int.fromString(getValue(obj$1, "idMeal")));
    var mealName = getValue(obj$1, "strMeal");
    var area = getValue(obj$1, "strArea");
    var category = getValue(obj$1, "strCategory");
    var instructions = getValue(obj$1, "strInstructions");
    var thumbnail = getValue(obj$1, "strMealThumb");
    var tags = getValue(obj$1, "strTags").split(",");
    var youtubeLinkStr = getValue(obj$1, "strYoutube");
    var youtubeLink = youtubeLinkStr === "" ? undefined : youtubeLinkStr;
    var ingredientAndMeasures = [
      [
        getValue(obj$1, "strIngredient1"),
        getValue(obj$1, "strMeasure1")
      ],
      [
        getValue(obj$1, "strIngredient2"),
        getValue(obj$1, "strMeasure2")
      ],
      [
        getValue(obj$1, "strIngredient3"),
        getValue(obj$1, "strMeasure3")
      ],
      [
        getValue(obj$1, "strIngredient4"),
        getValue(obj$1, "strMeasure4")
      ],
      [
        getValue(obj$1, "strIngredient5"),
        getValue(obj$1, "strMeasure5")
      ],
      [
        getValue(obj$1, "strIngredient6"),
        getValue(obj$1, "strMeasure6")
      ],
      [
        getValue(obj$1, "strIngredient7"),
        getValue(obj$1, "strMeasure7")
      ],
      [
        getValue(obj$1, "strIngredient8"),
        getValue(obj$1, "strMeasure8")
      ],
      [
        getValue(obj$1, "strIngredient9"),
        getValue(obj$1, "strMeasure9")
      ],
      [
        getValue(obj$1, "strIngredient10"),
        getValue(obj$1, "strMeasure10")
      ],
      [
        getValue(obj$1, "strIngredient11"),
        getValue(obj$1, "strMeasure11")
      ],
      [
        getValue(obj$1, "strIngredient12"),
        getValue(obj$1, "strMeasure12")
      ],
      [
        getValue(obj$1, "strIngredient13"),
        getValue(obj$1, "strMeasure13")
      ],
      [
        getValue(obj$1, "strIngredient14"),
        getValue(obj$1, "strMeasure14")
      ],
      [
        getValue(obj$1, "strIngredient15"),
        getValue(obj$1, "strMeasure15")
      ],
      [
        getValue(obj$1, "strIngredient16"),
        getValue(obj$1, "strMeasure16")
      ],
      [
        getValue(obj$1, "strIngredient17"),
        getValue(obj$1, "strMeasure17")
      ],
      [
        getValue(obj$1, "strIngredient18"),
        getValue(obj$1, "strMeasure18")
      ],
      [
        getValue(obj$1, "strIngredient19"),
        getValue(obj$1, "strMeasure19")
      ],
      [
        getValue(obj$1, "strIngredient20"),
        getValue(obj$1, "strMeasure20")
      ]
    ];
    return {
            id: id,
            mealName: mealName,
            category: category,
            area: area,
            instructions: instructions,
            thumbnail: thumbnail,
            tags: tags,
            youtubeLink: youtubeLink,
            ingredientAndMeasures: ingredientAndMeasures
          };
  }
  throw {
        RE_EXN_ID: PARSE_FAILED,
        _1: "Meal is not an object",
        Error: new Error()
      };
}

function parseResponse(json) {
  console.log(JSON.stringify(json));
  try {
    var obj = Js_json.classify(json);
    if (typeof obj === "number") {
      throw {
            RE_EXN_ID: PARSE_FAILED,
            _1: "A Json Object was expected as input",
            Error: new Error()
          };
    }
    if (obj.TAG === /* JSONObject */2) {
      var mealsArray = Js_dict.get(obj._0, "meals");
      if (mealsArray !== undefined) {
        var array = Js_json.classify(Caml_option.valFromOption(mealsArray));
        if (typeof array === "number") {
          throw {
                RE_EXN_ID: PARSE_FAILED,
                _1: "Value of meals key should be an array",
                Error: new Error()
              };
        }
        if (array.TAG === /* JSONArray */3) {
          return {
                  TAG: /* Ok */0,
                  _0: array._0.map(parseMeal)
                };
        }
        throw {
              RE_EXN_ID: PARSE_FAILED,
              _1: "Value of meals key should be an array",
              Error: new Error()
            };
      } else {
        throw {
              RE_EXN_ID: PARSE_FAILED,
              _1: "Input JSON doesn't have a meals key",
              Error: new Error()
            };
      }
    } else {
      throw {
            RE_EXN_ID: PARSE_FAILED,
            _1: "A Json Object was expected as input",
            Error: new Error()
          };
    }
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === PARSE_FAILED) {
      return {
              TAG: /* Error */1,
              _0: msg._1
            };
    }
    throw msg;
  }
}

function getRandomMeal(param) {
  return Js_promise2.then(Js_promise2.then(fetch("https://www.themealdb.com/api/json/v1/1/random.php"), (function (prim) {
                    return prim.json();
                  })), (function (json) {
                return Promise.resolve(parseResponse(json));
              }));
}

export {
  PARSE_FAILED ,
  getValue ,
  parseMeal ,
  parseResponse ,
  getRandomMeal ,
}
/* No side effect */
